axis.title.y = element_text(colour = "Red", size = 30),
legend.title = element_text(size = 30),
legend.text = element_text(size = 20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title = element_text(colour = "DarkBlue",
size = 40,
family = "Courier"))
homework_data <- read.csv(file.choose())
homework_data <- read.csv(file.choose())
movies <- read.csv(file.choose())
movies <- homework_data
View(homework_data)
View(homework_data)
factor(homework_data$Day.of.Week)
levels(homework_data$Day.of.Week)
select(data = homework_data, homework_data$Day.of.Week == "Friday")
filter(data = homework_data, homework_data$Day.of.Week == "Friday")
select(data = homework_data, homework_data$Day.of.Week == "Friday)
select(data = homework_data, homework_data$Day.of.Week == "Friday")
select(data = homework_data, homework_data$Day.of.Week == "Friday")
$select()
?select()
select(homework_data, homework_data$Day.of.Week == "Friday")
filter(homework_data, homework_data$Day.of.Week == "Friday")
#Import the Data
getwd()
mov <- read.csv(file.choose())
#Data Exploration
head(mov) #top rows
summary(mov) #column summaries
str(mov) #structure of the dataset
#Activate GGPlot2
#install.packages("ggplot2")
library(ggplot2)
#{Offtopic} This Is A Cool Insight:
ggplot(data=mov, aes(x=Day.of.Week)) + geom_bar()
# anather fucntion short cut filter2 <- mov$Studio %in% c("Buena Vista Studios", "WB", "Fox", "Universal", "Sony", "Paramount Pictures")
#Apply the row filters to the dataframe
mov2 <- mov[filt & filt2,]
#Now we need to filter our dataset to leave onlly the
#Genres and Studios that we are interested in
#We will start with the Genre filter and use the Logical 'OR'
#operator to select multiple Genres:
filt <- (mov$Genre == "action") | (mov$Genre == "adventure") | (mov$Genre == "animation") | (mov$Genre == "comedy") | (mov$Genre == "drama")
#Now let's do the same for the Studio filter:
filt2 <- (mov$Studio == "Buena Vista Studios") | (mov$Studio == "WB") | (mov$Studio == "Fox") | (mov$Studio == "Universal") | (mov$Studio == "Sony") | (mov$Studio == "Paramount Pictures")
# anather fucntion short cut filter2 <- mov$Studio %in% c("Buena Vista Studios", "WB", "Fox", "Universal", "Sony", "Paramount Pictures")
#Apply the row filters to the dataframe
mov2 <- mov[filt & filt2,]
# anather fucntion short cut filter2 <- mov$Studio %in% c("Buena Vista Studios", "WB", "Fox", "Universal", "Sony", "Paramount Pictures")
#Apply the row filters to the dataframe
mov2 <- mov[filt & filt2,]
mov2
#Prepare the plot's data and aes layers
#Note we did not rename the columns.
#Use str() or summary() to fin out the correct column names
p <- ggplot(data=mov2, aes(x=Genre, y=Gros...US))
p #Nothing happens. We need a geom.
#Prepare the plot's data and aes layers
#Note we did not rename the columns.
#Use str() or summary() to fin out the correct column names
p <- ggplot(data=mov2, aes(x=Genre, y=Gross...US))
p #Nothing happens. We need a geom.
p +
geom_boxplot() +
geom_jitter()
#Add points
p +
geom_boxplot(alpha=0.7) +
geom_jitter()
p + geom_jitter() +
geom_boxplot(alpha=0.7)
#Add points
p + geom_jitter(aes(size=Budget...mil.)) +
geom_boxplot(alpha=0.7)
#Add points
p + geom_jitter(aes(size=Budget...mill.)) +
geom_boxplot(alpha=0.7)
#Add points
p + geom_jitter(aes(size=Budget...mill., colour = Studio)) +
geom_boxplot(alpha=0.7)
#Add points
p + geom_jitter(aes(size=Budget...mill., colour = Studio)) +
geom_boxplot(alpha=0.7, outlier.color = NA)
#Add points
q <- p + geom_jitter(aes(size=Budget...mill., colour = Studio)) +
geom_boxplot(alpha=0.7, outlier.color = NA)
q <- q +
xlab("Genre") + #x axis title
ylab("Gross % US") + #y axis title
ggtitle("Domestic Gross % by Genre") #plot title
q
q <- q +
theme(
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.title.x = element_text(size=20),
axis.title.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
)
q
q$labels$size = "Budget $M"
q
load("~/Desktop/PROGRAMMING/EREMENKOML/part_1/Data_Preprocessing/data_preprocessing_template.R")
load("~/Desktop/PROGRAMMING/EREMENKOML/part_1/Data_Preprocessing/categorical_data.R")
# Splitting the dataset into the Training set and Test set
install.packages('caTools')
library(caTools)
library(caTools)
set.seed(123)
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
dataset = read.csv('Data.csv')
dataset = read.csv('Data.csv')
# Importing the dataset
gtwd()
# Data Preprocessing
getwd()
setwd()
setwd(dir)
setwd(/Users/mac/Desktop/PROGRAMMING/EREMENKOML)
setwd(Users/mac/Desktop/PROGRAMMING/EREMENKOML)
setwd("Users/mac/Desktop/PROGRAMMING/EREMENKOML")
setwd("/Users/mac/Desktop/PROGRAMMING/EREMENKOML")
setwd("/Users/mac/Desktop/PROGRAMMING/EREMENKOML/part_1/Data_Preprocessing")
# Importing the dataset
dataset = read.csv('Data.csv')
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
set.seed(123)
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Splitting the dataset into the Training set and Test set
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
install.packages("caTools")
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
View(dataset)
View(dataset)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
set.seed(123)
split <- sample.split(dataset$DependentVariable, SplitRatio = 0.8)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
View(dataset)
View(dataset)
split <- sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
View(dataset)
View(dataset)
training_set <- scale(training_set)
test_set <- scale(test_set)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
View(dataset)
View(dataset)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
training_set <- scale(training_set)
test_set <- scale(test_set)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
training_set[,2:3] <- scale(training_set)
test_set[,2:3] <- scale(test_set)
View(training_set)
View(training_set)
# Feature Scaling
training_set[,2:3] <- scale(training_set[,2:3])
test_set[,2:3] <- scale(test_set[,2:3])
View(test_set)
View(test_set)
getwd()
setwd("..")
setwd("..")
setwd("..")
getwd()
setwd("/Users/mac/Desktop/PROGRAMMING/RProgramming/ADVANCED R PROGRAMMING")
setwd("/Users/mac/Desktop/PROGRAMMING/RProgramming/ADVANCED R PROGRAMMING/Data Preperation")
getwd()
setwd("..")
setwd("/Users/mac/Desktop/PROGRAMMING/RProgramming/ADVANCED R PROGRAMMING/Data Preperation")
fin <- read.csv("Future 500.csv")
fin <- read.csv("Future 500.csv")
fin <- read.csv(file.choose())
head(fin)
str(fin)
str(fin)
fin$Inseption <- factor(fin$Inception)
str(fin)
a <- c("12", "13", "14", "12", "12")
b <- as.numeric(a)
typeof(b)
y <- as.numeric(z)
z <- c("12", "13", "14", "12", "12")
typeof(b)
y <- as.numeric(z)
y
typeof(z)
z <- factor(c("12", "13", "14", "12", "12"))
typeof(z)
y <- as.numeric(z)
y
b
x
x <- ac.numeric(as.character(z))
x <- as.numeric(as.character(z))
x
head(fin$Name)
str(fin)
View(fin)
View(fin)
fin$Profit <- factor(fin$Profit)
str(fin)
summary(fin)
?sub
head(fin)
?sub
head(fin)
fin$Expenses <- gsub(" Dollars", "", fin$Expenses)
head(fin)
fin$Expenses <- gsub(",", "", fin$Expenses)
head(fin)
str(fin)
fin$Revenue <- gsub("$","", fin$Revenue)
head(fin)
fin$Revenue <- gsub("$","", fin$Revenue)
head(fin)
fin$Revenue <- gsub("$","", fin$Revenue)
fin$Revenue <- gsub(",","", fin$Revenue)
head(fin)
fin$Revenue <- gsub("//$","", fin$Revenue)
head(fin)
fin$Revenue <- gsub("\\$","", fin$Revenue)
head(fin)
fin$Growth <- gsub("%", "", fin$Revenue)
head(fin)
fin$Growth
View(fin)
View(fin)
str(fin)
fin$Revenue <- as.numeric(fin$Revenue)
fin$Growth <- as.numeric(fin$Growth)
fin$Expenses <- as.numeric(fin$Expenses)
head(fin)
str(fin)
summary(fin)
select(data = fin, fin$Inseption == 2006,)
?select()
select(data = fin, fin$Inseption == 2006)
select(fin, fin$Inseption == 2006)
subset(data = fin, fin$Inception == 2006)
subset
subset(data = fin, fin$Inception)
library("tidyverse", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
select(data = fin, fin$Inception)
select(data = fin, starts_with("St"))
subset(data = fin, starts_with("St"))
library("dbplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("tidyselect", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
select(data = fin, fin$Inception)
subset(data = fin, starts_with("St"))
subset(fin, starts_with("St"))
library(dplyr)
select(data = fin, fin$Inception)
subset(fin, starts_with("St"))
load("~/Desktop/PROGRAMMING/RProgramming/R PROGRAMMIN INTRO/Rexamples/financial_stat_examp.R")
load("~/Desktop/PROGRAMMING/RProgramming/R PROGRAMMIN INTRO/Rexamples/financial_stat_examp.R")
getwd()
setwd(..)
setwd("..")
getwd()
setwd("R PROGRAMMING INTRO")
setwd("R PROGRAMMIN INTRO")
setwd("R PROGRAMMIN INTRO")
setwd("..")
getwd()
setwd("R PROGRAMMIN INTRO")
setwd("Rexamples")
getwd()
load("~/Desktop/PROGRAMMING/RProgramming/R PROGRAMMIN INTRO/Rexamples/financial_stat_examp.R")
select(fin,starts_with("S"))
subset(fin, starts_with("St"))
subset(fin,starts_with("St"))
select(fin,starts_with("St"))
select(data = fin, fin$Inception)
select(data = fin, fin$Inception)
select(fin, fin$Inception)
select(fin, fin$Inception == 2006)
select(fin, fin$Inception == "2006")
head(fin, 24)
complete.cases(fin)
fin[complete.cases(fin),]
fin[!complete.cases(fin),]
count(fin[!complete.cases(fin),])
fin$Revenue == 9432242
fin[fin$Revenue == 9746272,]
View(fin)
View(fin)
fin[which(fin$Revenue == 9746272,)]
fin[which(fin$Revenue == 9746272,)]
fin[!complete.cases(fin),]  #count() == 6
fin[which(fin$Revenue == 9746272),]
fin[which(fin$Revenue == 45),]
fin[which(fin$Employees == 45),]
fin[(fin$Employees == 45)]
fin[fin$Employees == 45,]
a <- c(1, 24, 543, NA, 7)
is.na(a)
fin[fin$Expenses == NA,]
fin[fin$Expenses == NA,]
is.na(fin$Expenses)
fin[is.na(fin$Expenses),]
fin[which(fin$Revenue == 9746272),]
fin_backup <- fin
fin[!complete.cases(fin),]
fin[is.na(fin$Industry),]
fin[is.na(fin$Industry),]
fin[is.na(fin$Inseption),]
fin[!is.na(fin$Inseption),]
fin <- fin[!is.na(fin$Inseption),] #opposite way
rownames(fin)
rownames(fin) <- 1:nrow(fin)
rownames(fin)
fin_backup <- fin
fin
rownames(fin) <- NULL
rownames(fin)
fin[is.na(fin$Stata)]
fin[is.na(fin$State)]
fin[is.na(fin$State)]
fin[fin$ID == 11,]
fin[fin$State == "",]
View(fin)
View(fin)
fin[fin$State == "" & fin$City=="New York",]
fin[fin$State == "" & fin$City=="New York","State"] <- "NY"
fin[fin$State == "" & fin$City=="New York"]
fin[fin$City=="New York"]
fin[fin$City=="New York",]
fin[c(11, 377),]
fin[!complete.cases(fin)]
fin[!complete.cases(fin),]
View(fin)
View(fin)
fin[fin$City=="San Francisco",]
#CHECK:
fin[fin$State == "SA"]
fin[fin$State == "" & fin$City=="San Francisco","State"] <- "SA"
fin[fin$State == "" & fin$City=="San Francisco","State"] <- "SA"
fin[fin$State == "" & fin$City=="San Francisco"]
fin[fin$City=="San Francisco",]
fin[fin$State == "" & fin$City=="San Francisco",]
fin[fin$State == "" & fin$City=="San Francisco","State"] <- "SA"
fin[is.na(fin$State)  & fin$City=="San Francisco","State"] <- "SA"
fin[fin$State == "" & fin$City=="San Francisco",]
fin[fin$State == "" & fin$City=="San Francisco",]
fin[is.na(fin$State) & fin$City=="San Francisco",]
fin[is.na(fin$State) & fin$City=="San Francisco","State"] <- "CA"
fin[c(83,266)]
fin[c(83,266),]
fin[!complete.cases(fin)]
fin[!complete.cases(fin),]
fin_backup <- fin
fin[fin$Industry == "Retail"]
fin[fin$Industry == "Retail",]
median(fin[,"Employees"],na.rm = TRUE)
mean(fin[,"Employees"],na.rm = TRUE)
mean(fin[fin$Industry == "Retail","Employees"],na.rm = TRUE)
med_empl_retail <- median(fin[fin$Industry == "Retail","Employees"],na.rm = TRUE)
fin[is.na(fin$Employees),]
fin[is.na(fin$Employees) & fin$Industry == "Retail", "Employees"] <- med_empl_retail
fin[is.na(fin$Employees) & fin$Industry == "Retail"]
fin[fin$Industry == "Retail"]
fin[fin$Industry == "Retail",]
fin[is.na(fin$Employees)]
fin[is.na(fin$Employees),]
mean_empl_service <- mean(fin[fin$Industry == "Services", "Employees"], na.rm = TRUE)
fin[is.na(fin$Employees) & fin$Industry == "Services", "Employees"] <- mean_empl_service
fin[fin$ID == 332,]
fin[is.na(fin$Employees) & fin$Industry == "Services", "Employees"] <- mean_empl_service
fin[fin$ID == 332,]
fin[is.na(fin$Employees),]
fin[is.na(fin$Employees) & fin$Industry == "Financial Services", "Employees"] <- mean_empl_service
fin[fin$ID == 332,]
mean_empl_service <- mean(fin[fin$Industry == "Services", "Employees"], na.rm = TRUE)
mean_empl_service
mean_empl_service <- mean(fin[fin$Industry == "Financial Services", "Employees"], na.rm = TRUE)
fin[is.na(fin$Employees) & fin$Industry == "Financial Services", "Employees"] <- mean_empl_service
fin[fin$ID == 332,]
fin[!complete.cases(fin),]
med_growth_constr <- median(fin[fin$Industry=="Construction","Growth"], na.rm = TRUE)
med_growth_constr
fin[is.na(fin$Growth) & fin$Industry == "Construction", "Growth"] <- med_growth_constr
fin[fin$ID == c(8,43),]
fin[fin$ID == 8,]
fin[c(8,17,43),]
fin[!complete.cases(fin),]
fin[is.na(fin$Expenses) & !is.na(fin$Revenue),]
fin[is.na(fin$Expenses) & !is.na(fin$Revenue),"Expenses"] <- fin[17, "Revenue"] - fin[17, "Profit"]
typeof(fin$Revenue)
typeof(fin$Profit)
as.double(fin$Profit)
fin[is.na(fin$Expenses) & !is.na(fin$Revenue),"Expenses"] <- fin[17, "Revenue"] - fin[17, "Profit"]
fin[is.na(fin$Expenses) & !is.na(fin$Revenue),"Expenses"] <- (fin[17, "Revenue"]-fin[17, "Profit"])
fin[is.na(fin$Expenses) & fin$Industry=="Construction" & is.na(fin$Profit),]
fin[!complete.cases(fin),]
med_revenue_constr <- median(fin[fin$Industry=="Construction","Revenue"], na.rm = TRUE)
fin[fin$Industry=="Construction" & is.na(fin$Revenue),"Revenue"] <- med_revenue_constr
#Check:
fin[!complete.cases(fin),]
fin[is.na(fin$Profit),"Profit"] <- fin[is.na(fin$Profit), "Revenue"] - fin[is.na(fin$Profit), "Expenses"]
#Check:
fin[!complete.cases(fin),]
fin[is.na(fin$Expenses),]
fin[is.na(fin$Expenses),"Expenses"] <- fin[is.na(fin$Expenses), "Revenue"] - fin[is.na(fin$Expenses), "Profit"]
fin[17,]
typeof(fin$Expenses)
typeof(fin$Revenue)
typeof(fin$Profit)
summary(fin)
str(fin)
as.numeric(fin$Profit)
str(fin)
as.numeric(as.character(fin$Profit))
str(fin)
str(fin)
as.numeric(as.character(fin$Profit))
str(fin$Profit)
str(fin)
typeof(fin$Profit)
fin$Profit <- as.numeric(as.character(fin$Profit))
str(fin)
fin[is.na(fin$Expenses),"Expenses"] <- fin[is.na(fin$Expenses), "Revenue"] - fin[is.na(fin$Expenses), "Profit"]
fin[!complete.cases(fin),]
median(fin[is.na(fin$Expenses),"Expenses"]
type_convert()
med_revenue_constr <- median(fin[!is.na(fin$Expenses),"Expenses"])
med_expens_12 <- median(fin[!is.na(fin$Expenses),"Expenses"])
med_expens_12
fin[!is.na(Expenses),"Expenses"] <- med_expens_12
med_expens_12 <- median(fin[!is.na(fin$Expenses),"Expenses"])
fin[!is.na(Expenses),"Expenses"] <- med_expens_12
fin[!is.na(fin$Expenses),"Expenses"] <- med_expens_12
fin[!complete.cases(fin)]
fin[!complete.cases(fin),]
fin[!is.na(fin$Expenses),"Expenses"] <- med_expens_12
fin[!complete.cases(fin),]
med_expens_12
fin[is.na(fin$Expenses),"Expenses"] <- med_expens_12
fin[!complete.cases(fin),]
library(ggplot2)
p <- ggplot(data = fin)
p + geom_point(aes( x = Revenue, y = Expenses))
p + geom_point(aes( x = Revenue, y = Expenses, colour))
p + geom_point(aes( x = Revenue, y = Expenses, colour = Industry))
fin <- fin_backup
p <- ggplot(data = fin)
p + geom_point(aes( x = Revenue, y = Expenses, colour = Industry))
d <- p + geom_point(aes(x = Revenue, colour = Industry))
d + geom_smooth(fill = NA, size = 1.2)
f <- ggplot( data = fin, aes(x= Industry, y = Growth,
colour=Industry))
f + geom_boxplot()
f + geom_boxplot() + geom_jitter()
f + geom_boxplot(alpha = 0.5) + geom_jitter()
f + geom_boxplot(alpha = 0.5, outlier.colour = NA) + geom_jitter()
fin[which(fin$Revenue == 9746272),]
